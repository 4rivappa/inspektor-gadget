#!/usr/bin/python
# @lint-avoid-python-3-compatibility-imports
#
# opensnoop Trace open() syscalls.
#           For Linux, uses BCC, eBPF. Embedded C.
#
# USAGE: opensnoop [-h] [-T] [-x] [-p PID] [-d DURATION] [-t TID] [-n NAME]
#
# Copyright (c) 2015 Brendan Gregg.
# Licensed under the Apache License, Version 2.0 (the "License")
#
# 17-Sep-2015   Brendan Gregg   Created this.
# 29-Apr-2016   Allan McAleavy  Updated for BPF_PERF_OUTPUT.
# 08-Oct-2016   Dina Goldshtein Support filtering by PID and TID.
# 28-Dec-2018   Tim Douglas     Print flags argument, enable filtering
# 06-Jan-2019   Takuma Kume     Support filtering by UID

from __future__ import print_function
from bcc import ArgString, BPF
from bcc.utils import printb
import argparse
import ctypes as ct
from datetime import datetime, timedelta
import os

# arguments
examples = """examples:
    ./opensnoop              # trace all open() syscalls
    ./opensnoop -T           # include timestamps
    ./opensnoop -U           # include UID
    ./opensnoop -x           # only show failed opens
    ./opensnoop -p 181       # only trace PID 181
    ./opensnoop -t 123       # only trace TID 123
    ./opensnoop -c $CID      # only trace CID (64 hex)
    ./opensnoop -l app=web   # only trace pods with this label
    ./opensnoop -u 1000      # only trace UID 1000
    ./opensnoop -d 10        # trace for 10 seconds only
    ./opensnoop -n main      # only print process names containing "main"
    ./opensnoop -e           # show extended fields
    ./opensnoop -f O_WRONLY -f O_RDWR  # only print calls for writing
"""
parser = argparse.ArgumentParser(
    description="Trace open() syscalls",
    formatter_class=argparse.RawDescriptionHelpFormatter,
    epilog=examples)
parser.add_argument("-T", "--timestamp", action="store_true",
    help="include timestamp on output")
parser.add_argument("-U", "--print-uid", action="store_true",
    help="print UID column")
parser.add_argument("-x", "--failed", action="store_true",
    help="only show failed opens")
parser.add_argument("-p", "--pid",
    help="trace this PID only")
parser.add_argument("-t", "--tid",
    help="trace this TID only")
parser.add_argument("-c", "--containerid",
    help="trace this container ID only")
parser.add_argument("-l", "--label",
    help="trace pods with this label only")
parser.add_argument("-u", "--uid",
    help="trace this UID only")
parser.add_argument("-d", "--duration",
    help="total duration of trace in seconds")
parser.add_argument("-n", "--name",
    type=ArgString,
    help="only print process names containing this name")
parser.add_argument("--ebpf", action="store_true",
    help=argparse.SUPPRESS)
parser.add_argument("-e", "--extended_fields", action="store_true",
    help="show extended fields")
parser.add_argument("-f", "--flag_filter", action="append",
    help="filter on flags argument (e.g., O_WRONLY)")
args = parser.parse_args()
debug = 0
if args.duration:
    args.duration = timedelta(seconds=int(args.duration))
flag_filter_mask = 0
for flag in args.flag_filter or []:
    if not flag.startswith('O_'):
        exit("Bad flag: %s" % flag)
    try:
        flag_filter_mask |= getattr(os, flag)
    except AttributeError:
        exit("Bad flag: %s" % flag)

# define BPF program
bpf_text = """
#include <uapi/linux/ptrace.h>
#include <uapi/linux/limits.h>
#include <linux/sched.h>

struct val_t {
    u64 id;
    char comm[TASK_COMM_LEN];
    const char *fname;
    int flags; // EXTENDED_STRUCT_MEMBER
};

struct data_t {
    u64 id;
    u64 ts;
    u32 uid;
    int ret;
    char comm[TASK_COMM_LEN];
    char fname[NAME_MAX];
    int flags; // EXTENDED_STRUCT_MEMBER
};

typedef char containerid[64];

typedef char text64[64];

BPF_HASH(pidmap, u32, containerid);
BPF_HASH(containermap, containerid, u32);
BPF_HASH(labelmap, text64, text64);
BPF_HASH(infotmp, u64, struct val_t);
BPF_PERF_OUTPUT(events);

int trace_entry(struct pt_regs *ctx, int dfd, const char __user *filename, int flags)
{
    struct val_t val = {};
    u64 id = bpf_get_current_pid_tgid();
    u32 pid = id >> 32; // PID is higher part
    u32 tid = id;       // Cast and get the lower part
    u32 uid = bpf_get_current_uid_gid();
    containerid *cid = pidmap.lookup(&pid);

    CONTAINERID_FILTER
    LABEL_FILTER
    PID_TID_FILTER
    UID_FILTER
    FLAGS_FILTER
    if (bpf_get_current_comm(&val.comm, sizeof(val.comm)) == 0) {
        val.id = id;
        val.fname = filename;
        val.flags = flags; // EXTENDED_STRUCT_MEMBER
        infotmp.update(&id, &val);
    }

    return 0;
};

int trace_return(struct pt_regs *ctx)
{
    u64 id = bpf_get_current_pid_tgid();
    struct val_t *valp;
    struct data_t data = {};

    u64 tsp = bpf_ktime_get_ns();

    valp = infotmp.lookup(&id);
    if (valp == 0) {
        // missed entry
        return 0;
    }
    bpf_probe_read(&data.comm, sizeof(data.comm), valp->comm);
    bpf_probe_read(&data.fname, sizeof(data.fname), (void *)valp->fname);
    data.id = valp->id;
    data.ts = tsp / 1000;
    data.uid = bpf_get_current_uid_gid();
    data.flags = valp->flags; // EXTENDED_STRUCT_MEMBER
    data.ret = PT_REGS_RC(ctx);

    events.perf_submit(ctx, &data, sizeof(data));
    infotmp.delete(&id);

    return 0;
}
"""
if args.tid:  # TID trumps PID
    bpf_text = bpf_text.replace('PID_TID_FILTER',
        'if (tid != %s) { return 0; }' % args.tid)
elif args.pid:
    bpf_text = bpf_text.replace('PID_TID_FILTER',
        'if (pid != %s) { return 0; }' % args.pid)
else:
    bpf_text = bpf_text.replace('PID_TID_FILTER', '')

if args.containerid:
    if len(args.containerid) != 64:
        exit("Bad size for containerid: %s" % args.containerid)
    bpf_text = bpf_text.replace('CONTAINERID_FILTER',
        '''if (cid == 0 ||
               (*cid)[0] != '%s' || (*cid)[1] != '%s' || (*cid)[2] != '%s' || (*cid)[3] != '%s' ||
               (*cid)[4] != '%s' || (*cid)[5] != '%s' || (*cid)[6] != '%s' || (*cid)[7] != '%s' ||
               (*cid)[8] != '%s' || (*cid)[9] != '%s' || (*cid)[10] != '%s' || (*cid)[11] != '%s' ||
               (*cid)[12] != '%s' || (*cid)[13] != '%s' || (*cid)[14] != '%s' || (*cid)[15] != '%s')
              { return 0; }
        ''' % (args.containerid[0], args.containerid[1], args.containerid[2], args.containerid[3],
               args.containerid[4], args.containerid[5], args.containerid[6], args.containerid[7],
               args.containerid[8], args.containerid[9], args.containerid[10], args.containerid[11],
               args.containerid[12], args.containerid[13], args.containerid[14], args.containerid[15]))
else:
    bpf_text = bpf_text.replace('CONTAINERID_FILTER', '')

if args.label:
    label_kv = args.label.split("=", 2)
    if len(label_kv) != 2 or len(label_kv[0]) > 64 or len(label_kv[1]) > 64:
        exit("Bad key-value label selector: %s" % args.label)
    label_kv[0] = label_kv[0] + " " * (64 - len(label_kv[0]))
    label_kv[1] = label_kv[1] + " " * (64 - len(label_kv[1]))
    key = "'" + "', '".join(list(label_kv[0])) + "'"
    expectedvalue = "'" + "', '".join(list(label_kv[1])) + "'"
    bpf_text = bpf_text.replace('LABEL_FILTER',
        '''if (cid == 0) {
                return 0;
              }
           u32 *innermap = containermap.lookup(cid);
           if (innermap == NULL) {
             return 0;
           }
           text64 textkey = {%s};
           text64 textexpectedvalue = {%s};
           text64 *textvalue = bpf_map_lookup_elem_((uintptr_t)innermap, &textkey[0]);
           if (textvalue == NULL) {
             return 0;
           }

           if (textexpectedvalue[0] != textvalue[0][0] ||
               textexpectedvalue[1] != textvalue[0][1] ||
               textexpectedvalue[2] != textvalue[0][2] ||
               textexpectedvalue[3] != textvalue[0][3] ||
               textexpectedvalue[4] != textvalue[0][4] ||
               textexpectedvalue[5] != textvalue[0][5] ||
               textexpectedvalue[6] != textvalue[0][6] ||
               textexpectedvalue[7] != textvalue[0][7] ||
               textexpectedvalue[8] != textvalue[0][8] ||
               textexpectedvalue[9] != textvalue[0][9] ||
               textexpectedvalue[10] != textvalue[0][10] ||
               textexpectedvalue[11] != textvalue[0][11] ||
               textexpectedvalue[12] != textvalue[0][12] ||
               textexpectedvalue[13] != textvalue[0][13] ||
               textexpectedvalue[14] != textvalue[0][14] ||
               textexpectedvalue[15] != textvalue[0][15]
           ) {
             return 0;
           }
        ''' % (key, expectedvalue))
else:
    bpf_text = bpf_text.replace('LABEL_FILTER', '')

if args.uid:
    bpf_text = bpf_text.replace('UID_FILTER',
        'if (uid != %s) { return 0; }' % args.uid)
else:
    bpf_text = bpf_text.replace('UID_FILTER', '')

if args.flag_filter:
    bpf_text = bpf_text.replace('FLAGS_FILTER',
        'if (!(flags & %d)) { return 0; }' % flag_filter_mask)
else:
    bpf_text = bpf_text.replace('FLAGS_FILTER', '')

if not (args.extended_fields or args.flag_filter):
    bpf_text = '\n'.join(x for x in bpf_text.split('\n')
        if 'EXTENDED_STRUCT_MEMBER' not in x)

if debug or args.ebpf:
    print(bpf_text)
    if args.ebpf:
        exit()

# initialize BPF
b = BPF(text=bpf_text)
os.dup2(90, 8) # pidmap
os.dup2(91, 6) # containermap
b.attach_kprobe(event="do_sys_open", fn_name="trace_entry")
b.attach_kretprobe(event="do_sys_open", fn_name="trace_return")

TASK_COMM_LEN = 16    # linux/sched.h
NAME_MAX = 255        # linux/limits.h

class Data(ct.Structure):
    _fields_ = [
        ("id", ct.c_ulonglong),
        ("ts", ct.c_ulonglong),
        ("uid", ct.c_uint32),
        ("ret", ct.c_int),
        ("comm", ct.c_char * TASK_COMM_LEN),
        ("fname", ct.c_char * NAME_MAX),
        ("flags", ct.c_int),
    ]

initial_ts = 0

# header
if args.timestamp:
    print("%-14s" % ("TIME(s)"), end="")
if args.print_uid:
    print("%-6s" % ("UID"), end="")
print("%-6s %-16s %4s %3s " %
      ("TID" if args.tid else "PID", "COMM", "FD", "ERR"), end="")
if args.extended_fields:
    print("%-9s" % ("FLAGS"), end="")
print("PATH")

# process event
def print_event(cpu, data, size):
    event = ct.cast(data, ct.POINTER(Data)).contents
    global initial_ts

    # split return value into FD and errno columns
    if event.ret >= 0:
        fd_s = event.ret
        err = 0
    else:
        fd_s = -1
        err = - event.ret

    if not initial_ts:
        initial_ts = event.ts

    if args.failed and (event.ret >= 0):
        return

    if args.name and bytes(args.name) not in event.comm:
        return

    if args.timestamp:
        delta = event.ts - initial_ts
        print("%-14.9f" % (float(delta) / 1000000), end="")

    if args.print_uid:
        print("%-6d" % event.uid, end="")

    print("%-6d %-16s %4d %3d " %
          (event.id & 0xffffffff if args.tid else event.id >> 32,
           event.comm.decode('utf-8', 'replace'), fd_s, err), end="")

    if args.extended_fields:
        print("%08o " % event.flags, end="")

    printb(b'%s' % event.fname)

# loop with callback to print_event
b["events"].open_perf_buffer(print_event, page_cnt=64)
start_time = datetime.now()
while not args.duration or datetime.now() - start_time < args.duration:
    try:
        b.perf_buffer_poll()
    except KeyboardInterrupt:
        exit()
