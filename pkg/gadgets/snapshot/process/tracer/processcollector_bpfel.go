// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64
// +build 386 amd64 amd64p32 arm arm64 mips64le mips64p32le mipsle ppc64le riscv64

package tracer

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type ProcessCollectorContainer struct {
	ContainerId [256]int8
	Namespace   [256]int8
	Pod         [256]int8
	Container   [256]int8
}

// LoadProcessCollector returns the embedded CollectionSpec for ProcessCollector.
func LoadProcessCollector() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_ProcessCollectorBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load ProcessCollector: %w", err)
	}

	return spec, err
}

// LoadProcessCollectorObjects loads ProcessCollector and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//     *ProcessCollectorObjects
//     *ProcessCollectorPrograms
//     *ProcessCollectorMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadProcessCollectorObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadProcessCollector()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// ProcessCollectorSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ProcessCollectorSpecs struct {
	ProcessCollectorProgramSpecs
	ProcessCollectorMapSpecs
}

// ProcessCollectorSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ProcessCollectorProgramSpecs struct {
	DumpTask *ebpf.ProgramSpec `ebpf:"dump_task"`
}

// ProcessCollectorMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ProcessCollectorMapSpecs struct {
	Containers *ebpf.MapSpec `ebpf:"containers"`
}

// ProcessCollectorObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadProcessCollectorObjects or ebpf.CollectionSpec.LoadAndAssign.
type ProcessCollectorObjects struct {
	ProcessCollectorPrograms
	ProcessCollectorMaps
}

func (o *ProcessCollectorObjects) Close() error {
	return _ProcessCollectorClose(
		&o.ProcessCollectorPrograms,
		&o.ProcessCollectorMaps,
	)
}

// ProcessCollectorMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadProcessCollectorObjects or ebpf.CollectionSpec.LoadAndAssign.
type ProcessCollectorMaps struct {
	Containers *ebpf.Map `ebpf:"containers"`
}

func (m *ProcessCollectorMaps) Close() error {
	return _ProcessCollectorClose(
		m.Containers,
	)
}

// ProcessCollectorPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadProcessCollectorObjects or ebpf.CollectionSpec.LoadAndAssign.
type ProcessCollectorPrograms struct {
	DumpTask *ebpf.Program `ebpf:"dump_task"`
}

func (p *ProcessCollectorPrograms) Close() error {
	return _ProcessCollectorClose(
		p.DumpTask,
	)
}

func _ProcessCollectorClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//go:embed processcollector_bpfel.o
var _ProcessCollectorBytes []byte
